module MoBL-UI

imports
  Common
  MoBL-Action

exports

  context-free syntax

    MetaAnno* "screen" QId "(" {FArg ","}* ")" "{" ScreenElem* "}" -> Definition {cons("ScreenNoReturnType")}
    MetaAnno* "screen" QId "(" {FArg ","}* ")" ":" Type "{" ScreenElem* "}" -> Definition {cons("Screen")}

    MetaAnno* "control" QId "(" {FArg ","}* ")" "{" ScreenElem* "}" -> ControlDefinition {cons("Control")}

    %% Legacy
    MetaAnno* "template" QId "(" {FArg ","}* ")" "{" ScreenElem* "}" -> ControlDefinition {deprecated("the 'template' keyword has been replaced with 'control'."),cons("Control")}

    ID "(" {FArg ","}* ")" -> ControlSig {cons("ControlSig")}

    ControlDefinition      -> Definition

    "<" HTMLID HtmlArg* ">" ScreenElem* "</" HTMLID ">"         -> ScreenElem {cons("Html")}
    "<" HTMLID HtmlArg* "/"">"                                  -> ScreenElem {cons("HtmlShort")}

    ID "@" "<" HTMLID HtmlArg* ">" ScreenElem* "</" HTMLID ">"  -> ScreenElem {cons("NamedHtml")}
    ID "@" "<" HTMLID HtmlArg* "/"">"                           -> ScreenElem {cons("NamedHtmlShort")}

    HTMLID "=" Exp                     -> HtmlArg    {cons("HtmlArg")}
    "databind" "=" Exp             -> HtmlArg    {cons("HtmlDatabindArg")}

    ControlDefinition                                                -> ScreenElem

    "var" ID ":" Type "=" Exp                                        -> ScreenElem {cons("VarDecl")}
    "var" ID "=" Exp                                                 -> ScreenElem {cons("VarDeclInferred")}

    "var" ID ":" Type "<-" Exp                                   -> ScreenElem {cons("DeriveDecl")}
    "var" ID "<-" Exp                                            -> ScreenElem {cons("DeriveDeclInferred")}

    FunctionDef                                                       -> ScreenElem

    %% Deprecated
    "init" "{" Statement* "}"                                         -> ScreenElem {cons("Script"), deprecated("Please use 'script' instead.")}

    "script" "{" Statement* "}"                                       -> ScreenElem {cons("Script")}

    STRING                                                            -> ScreenElem {cons("ScreenString")}

    "list" "(" LValue ":" Type "in" Exp ")" "{" ScreenElem* "}"       -> ScreenElem {cons("List")}
    "list" "(" LValue "in" Exp ")" "{" ScreenElem* "}"                -> ScreenElem {cons("ListInferred")}

    "cond" "(" Exp ")" "{" ScreenElem* "}"                            -> ScreenElem {cons("WhenNoElse"), deprecated("Please use when instead, same syntax, different keyword")}
    "when" "(" Exp ")" "{" ScreenElem* "}" "else" "{" ScreenElem* "}" -> ScreenElem {cons("When")}
    "when" "(" Exp ")" "{" ScreenElem* "}"                            -> ScreenElem {cons("WhenNoElse")}

    "var" ID ":" Type "=" Exp                                         -> ScreenElem {cons("ScreenVarDecl")}

    LimitedExp "(" {NamedExp ","}* ")" "{" ScreenElem* "}"   -> ScreenElem {prefer, cons("ControlCall")}
    LimitedExp "(" {NamedExp ","}* ")"                       -> ScreenElem {cons("ControlCallNoBody")}
    LimitedExp "{" ScreenElem* "}"                           -> ScreenElem {cons("ControlCallNoArgs")}

    Exp "." ID "(" {NamedExp ","}* ")"                       -> ScreenElem {reject}
    %%QId                                               -> ScreenElem {cons("ControlCallNoArgsNoBody")}
