module mobl::peersocket

load mobl/socketio.js

external type Socket {
  static function join(name : String, onmessage : Dynamic -> void, ondisconnect : Function0<void> = null) : Socket
  static function listServers() : [String]
  sync function send(message : Dynamic) : void

  @doc "A request-response message send"
  function query(message : Dynamic) : Dynamic
}

external type ServerSocket {
  static function create(name : String, onmessage : Num * Dynamic -> void, onquery : Num * Dynamic -> Dynamic = null, onconnect : Num -> void = null, ondisconnect : Num -> void = null) : ServerSocket
  sync function broadcast(message : Dynamic) : void
  sync function send(client : Num, message : Dynamic) : void
  sync function reply(tomessage : Dynamic, message : Dynamic) : void
}

<javascript>

mobl.peersocket.clientConnections = {};
mobl.peersocket.serverConnections = {};
mobl.peersocket.serverCreateCallback = null;
mobl.peersocket.clientJoinCallback = null;
mobl.peersocket.clientListCallback = null;

mobl.peersocket.socket = new io.Socket(null, {transports: [
    'websocket', //breaks chrome5, should be preferred :(
    'server-events', //i assume used in Opera, never seen it used
    //'flashsocket', //breaks android 2.1, chrome5
    'htmlfile', //preferred in IE8
    'xhr-multipart', //not supported on android 2.1, chrome5, preferred in FF3.6
    'xhr-polling' //preferred in chrome5, android 2.1, iPhone
]});
mobl.peersocket.socket.connect();
mobl.peersocket.socket.on('message', function(msg) {
  var parsed = JSON.parse(msg);
  var conn;
  switch(parsed.type) {
    case 'create':
      mobl.peersocket.serverCreateCallback(parsed.message);
      mobl.peersocket.serverCreateCallback = null;
      break;
    case 'join':
      mobl.peersocket.clientJoinCallback(parsed.message);
      mobl.peersocket.clientJoinCallback = null;
      break;
    case 'list':
      mobl.peersocket.clientListCallback(parsed.message);
      mobl.peersocket.clientListCallback = null;
      break;
    case 'message':
      conn = mobl.peersocket.serverConnections[parsed.server];
      conn.onmessage(parsed.client, parsed.message);
      break;
    case 'query':
      conn = mobl.peersocket.serverConnections[parsed.server];
      var replyMsg = conn.onquery(parsed.client, parsed.message);
      mobl.peersocket.socket.send(JSON.stringify({type: 'reply', client: parsed.client, replyTo: parsed.id, server: parsed.server, message: replyMsg}));
      break;
    case 'connect':
      conn = mobl.peersocket.serverConnections[parsed.server];
      conn.onconnect(parsed.client);
      break;
    case 'disconnect':
      conn = mobl.peersocket.serverConnections[parsed.server];
      conn.ondisconnect(parsed.client);
      break;
    case 'broadcast':
      conn = mobl.peersocket.clientConnections[parsed.server];
      conn.onmessage(parsed.message);
      break;
    case 'reply':
      conn = mobl.peersocket.clientConnections[parsed.server];
      var cb = conn.replyCallbacks[parsed.replyTo];
      if(cb) {
        cb(parsed.message);
      } else {
        console.error("Got reply to unknown message: " + parsed.replyTo);
      }
      break;
    case 'server-disconnect':
      conn = mobl.peersocket.clientConnections[parsed.server];
      conn.ondisconnect(parsed.client);
      break;
  }
});

mobl.peersocket.ServerSocket = function(name, onmessage, onquery, onconnect, ondisconnect) {
  this.onmessage = onmessage || function() {};
  this.onquery = onquery || function() {};
  this.onconnect = onconnect || function() {};
  this.ondisconnect = ondisconnect || function() {};
  this.name = name;
};

mobl.peersocket.ServerSocket.create = function(name, onmessage, onquery, onconnect, ondisconnect, callback) {
  mobl.peersocket.socket.send(JSON.stringify({type: 'create', name: name}));
  mobl.peersocket.serverCreateCallback = function(msg) {
    if(msg === 'ok') {
      var sock = new mobl.peersocket.ServerSocket(name, onmessage, onquery, onconnect, ondisconnect);
      mobl.peersocket.serverConnections[name] = sock;
      callback(sock);
    } else {
      callback(null);
    }
  };
};

mobl.peersocket.ServerSocket.prototype.broadcast = function(message) {
  mobl.peersocket.socket.send(JSON.stringify({type: 'broadcast', server: this.name, message: message}));
};

mobl.peersocket.Socket = function(name, onmessage, ondisconnect) {
  this.onmessage = onmessage || function() {};
  this.ondisconnect = ondisconnect || function() {};
  this.name = name;
  this.messageId = 0;
  this.replyCallbacks = {};
};

mobl.peersocket.Socket.join = function(name, onmessage, ondisconnect, callback) {
  mobl.peersocket.socket.send(JSON.stringify({type: 'join', name: name}));
  mobl.peersocket.clientJoinCallback = function(msg) {
    if(msg === 'ok') {
      var sock = new mobl.peersocket.Socket(name, onmessage, ondisconnect);
      mobl.peersocket.clientConnections[name] = sock;
      callback(sock);
    } else {
      callback(null);
    }
  };
};

mobl.peersocket.Socket.listServers = function(callback) {
  mobl.peersocket.socket.send(JSON.stringify({type: 'list'}));
  mobl.peersocket.clientListCallback = function(servers) {
    callback(servers);
  };
};

mobl.peersocket.Socket.prototype.send = function(message) {
  mobl.peersocket.socket.send(JSON.stringify({type: 'message', server: this.name, message: message}));
};

mobl.peersocket.Socket.prototype.query = function(message, callback) {
  this.messageId++;
  mobl.peersocket.socket.send(JSON.stringify({type: 'query', id: this.messageId, server: this.name, message: message}));
  this.replyCallbacks[this.messageId] = callback;
};

</javascript>