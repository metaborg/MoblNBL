application server

import mobl::peersocket
import mobl::ui::generic
import data

type LocalPlayer {
  name : String
  clientId : Num
  color : String
  deadFor : Num
  x     : Num
  y     : Num
  dx    : Num
  dy    : Num
  tail  : [(Num, Num)]
  score : Num
  droppings : Num
  turns : Num
}

screen root() {
  var name = ""
  header("Run a server") {
    button("Run", onclick={
      if(name) {
        runServer(name.substr(0, 20));
      } else {
        alert("Please fill in a name (max 20 characters)");
      }
    })
  }
  group {
    item {
      textField(name, placeholder="Pick a server name")
    }
  }
}

var sock : ServerSocket = null;
var FIELD_WIDTH = 50;
var FIELD_HEIGHT = 50;
var COLORS = ["black", "red", "blue", "green", "orange", "darkgrey", "purple"];
var players : [LocalPlayer] = [];
var apples  : [Apple] = [];
var droppings  : [Dropping] = [];
var clientToPlayer = Map<Num, LocalPlayer>();

function receiveMessage(clientId : Num, message : String) {
  var player : LocalPlayer = clientToPlayer.get(clientId);
  if(message == "left") {
    if(player.dx == -1 && player.dy == 0) {
      (player.dx, player.dy) = (0, 1);
    } else if(player.dx == 1 && player.dy == 0) {
      (player.dx, player.dy) = (0, -1);
    } else if(player.dx == 0 && player.dy == -1) {
      (player.dx, player.dy) = (-1, 0);
    } else  {
      (player.dx, player.dy) = (1, 0);
    }
  } else if(message == "right") {
    if(player.dx == -1 && player.dy == 0) {
      (player.dx, player.dy) = (0, -1);
    } else if(player.dx == 1 && player.dy == 0) {
      (player.dx, player.dy) = (0, 1);
    } else if(player.dx == 0 && player.dy == -1) {
      (player.dx, player.dy) = (1, 0);
    } else  {
      (player.dx, player.dy) = (-1, 0);
    }
  } else if(message == "drop") {
    if(player.droppings > 0) {
      droppings.push(Dropping(x=player.tail.get(player.tail.length-1)._1, y=player.tail.get(player.tail.length-1)._2));
      player.droppings = player.droppings - 1;
    }
  } else {
    player.name = message;
  }
}

function initPlayer(p : LocalPlayer) {
  p.x = Math.round(Math.random() * FIELD_WIDTH);
  p.y = Math.round(Math.random() * FIELD_HEIGHT);
  p.dy = 0;
  p.tail = [];
  p.turns = 0;
  p.droppings = 0;
  if(p.x > FIELD_WIDTH/2) {
    p.dx = -1;
  } else {
    p.dx = 1;
  }
}

function onConnect(client : Num) {
  log("Client connected: " + client);
  var lp = LocalPlayer(name="Unkown", clientId=client, color=COLORS.get(Math.floor(Math.random() * COLORS.length)), deadFor=0, score=0);
  initPlayer(lp);
  players.push(lp);
  clientToPlayer.set(client, lp);
}

function onDisconnect(client : Num) {
  var player : LocalPlayer = clientToPlayer.get(client);
  players.remove(player);
  log("Client disconnected: " + client);
}

function collides(player : LocalPlayer) : Bool {
  foreach(p in players) {
    if(p != player) {
      foreach((x, y) in p.tail) {
        if(player.x == x && player.y == y) {
          return true;
        }
      }
    }
  }
  foreach(d in droppings) {
    if(player.x == d.x && player.y == d.y) {
      droppings.remove(d);
      return true;
    }
  }
  return false;
}

function placeApple() {
  var goodSpot = false;
  var x = 0;
  var y = 0;
  while(goodSpot != true) {
    x = Math.floor(Math.random() * FIELD_WIDTH);
    y = Math.floor(Math.random() * FIELD_HEIGHT);
    goodSpot = true;
    foreach(a in apples) {
      if(x == a.x && y == a.y) {
        goodSpot = false;
      }
    }
    foreach(d in droppings) {
      if(x == d.x && y == d.y) {
        goodSpot = false;
      }
    }
    foreach(p in players) {
       foreach((tx, ty) in p.tail) {
         if(x == tx && y == ty) {
           goodSpot = false;
         }
      }
    }
  }
  apples.push(Apple(x=x, y=y));
}

function handleAteApple(player : LocalPlayer) {
  foreach(a in apples) {
    if(player.x == a.x && player.y == a.y) {
      apples.remove(a);
      placeApple();
      player.score = player.score+1;
      player.droppings = player.droppings+1;
    }
  }
}

function turn() {
  var update = Update(apples=apples, droppings=droppings, players=[]);
  foreach(player in players) {
    if(player.deadFor == 0) {
      var maxTailLength = Math.floor(player.turns / 10) + 5;
      if(player.tail.length >= maxTailLength) {
        player.tail.splice(player.tail.length-1, 1);
      }
      player.x = player.x + player.dx;
      player.y = player.y + player.dy;
      player.turns = player.turns + 1;
      if(player.x < 0) {
        initPlayer(player);
        player.deadFor = 10;
        update.players.push(Player(name=player.name, isDead=true, score=player.score));
      } else if(player.x == FIELD_WIDTH) {
        initPlayer(player);
        player.deadFor = 10;
        update.players.push(Player(name=player.name, isDead=true,score=player.score));
      } else if(player.y < 0) {
        initPlayer(player);
        player.deadFor = 10;
        update.players.push(Player(name=player.name, isDead=true, score=player.score));
      } else if(player.y == FIELD_HEIGHT) {
        initPlayer(player);
        player.deadFor = 10;
        update.players.push(Player(name=player.name, isDead=true, score=player.score));
      } else if(collides(player)) {
        initPlayer(player);
        player.deadFor = 10;
        update.players.push(Player(name=player.name, isDead=true,  score=player.score));
      } else {
        player.tail.insert(0, (player.x, player.y));
        update.players.push(Player(name=player.name, color=player.color, tail=player.tail, isDead=false, score=player.score));
      }
      handleAteApple(player);
    } else {
      player.deadFor = player.deadFor - 1;
      update.players.push(Player(name=player.name, isDead=true, score=player.score));
    }
  }
  sock.broadcast(update);
}

screen runServer(name : String) {
  script {
    sock = ServerSocket.create(name, onmessage=receiveMessage, onconnect=onConnect, ondisconnect=onDisconnect);
    if(!sock) {
      alert("Could not start a server with that name, maybe it's already in use?");
    }
    placeApple();
    placeApple();
    placeApple();
    placeApple();
    placeApple();
    repeat(150, {
      turn();
    });
  }
  header("Server")
  cond(sock) {
    "It's running..."
  }
}